import ddf.minim.*;
import ddf.minim.analysis.*;
import ddf.minim.effects.*;
import ddf.minim.signals.*;
import ddf.minim.spi.*;
import ddf.minim.ugens.*;
import processing.sound.*;

SoundFile file;
Minim minim;
AudioInput ai;
ddf.minim.analysis.FFT fft;


String audioName;
String path;

void setup()
{
  frameRate(60);
  
  size(1024, 500);
  minim = new Minim(this);
  ai = minim.getLineIn(Minim.MONO, width, 44100, 16);
  
  colorMode(HSB);
  
  cV = new CircleVisualiser();
  
  loadPixels();
  screen = (width*height);
  numparticles=int(160);
  ppr = int(width/spacing/2);
  parts = new particles[160];
  
  for(int i=0; i<numparticles; i++)
    {
      parts[i]=new particles((i*spacing)%width,i/ppr*spacing);
    }
    
  if (state == 0)
  {
    audioName = "Gerudo.mp3";
  }
  else if (state == 1)
  {
  audioName = "90s.mp3";
  }
    
    minim = new Minim(this);
    fft = new ddf.minim.analysis.FFT(width, 44100);
  path = sketchPath(audioName);
  file = new SoundFile(this, path);
    
  file.play();
}

int state;

CircleVisualiser cV;

void draw()
{
  background(0);
  
  if (state == 0)
  {
    strokeWeight(2);
    
    cV.render();
    
    
  }
  
  else if (state == 1)
  {  
    strokeWeight(8);
    
      for (int i=0; i<screen; i++)
    {
      pixels[i]=#000000;
    }
    
    for(int p = 0; p < ai.bufferSize(); p++)
      {
        if(ai.left.get(p) >= .1)
        {
          chase = true;
        }
        else
        {
          chase = false;
        }
        
       for(int i=0; i<numparticles; i++)
        {
          if(chase){parts[i].chase(width/2, height/2,-2);
        }
        else 
        {
          parts[i].home();
        }
          parts[i].show();
      }
      updatePixels();
      }
   }
  
    
  
  
}

void keyReleased()
{
  if (state == 0) 
  {
    state = 1;
  } 
  else 
  {
    state = 0;
  }
}
